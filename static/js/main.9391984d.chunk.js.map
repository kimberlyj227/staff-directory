{"version":3,"sources":["components/Jumbo/Jumbo.js","utils/API.js","utils/TableContext.js","components/TableBody/TableBody.js","components/Table/Table.js","components/Search/Search.js","components/Nav/Nav.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Jumbo","className","axios","get","TableContext","createContext","TableBody","developerState","useContext","undefined","filteredUsers","name","map","email","dob","login","phone","picture","key","uuid","data-h","src","medium","alt","first","last","date","dArr","split","year","join","formatDate","Table","handleSort","id","headings","width","style","onClick","Search","context","onChange","handleInputChange","type","placeholder","Nav","Main","useState","users","order","setDeveloperState","useEffect","API","then","res","data","results","Provider","value","e","filter","target","filteredList","item","toLowerCase","indexOf","heading","currentOrder","el","toString","sortUsers","sort","a","b","localeCompare","updateHeadings","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yVAaeA,MAVf,WACE,OACE,yBAAKC,UAAU,aACb,iDACA,uFACA,+B,gCCNS,EACR,WACH,OAAOC,IAAMC,IAAI,kDCGNC,EAJMC,wBAAc,IC8CpBC,EA9CG,WAAO,IAChBC,EAAkBC,qBAAWJ,GAA7BG,eAaP,OACE,oCACuCE,IAApCF,EAAeG,cAAc,SAA6DD,IAAzCF,EAAeG,cAAc,GAAGC,KAC/EJ,EAAeG,cAAcE,KAAI,YAAgD,IAA9CD,EAA6C,EAA7CA,KAAME,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACpE,OACA,wBAAIC,IAAKH,EAAMI,MACb,wBAAIC,SAAO,QAAQnB,UAAU,SAC3B,yBACEoB,IAAKJ,EAAQK,OACbC,IAAG,UAAKZ,EAAKa,MAAV,YAAmBb,EAAKc,SAG/B,wBAAIL,SAAO,OAAOnB,UAAU,QAA5B,UACMU,EAAKa,MADX,YACoBb,EAAKc,OAEzB,wBAAIL,SAAO,QAAQnB,UAAU,SAC1Be,GAEH,wBAAII,SAAO,QAAQnB,UAAU,SAC1BY,GAEH,wBAAIO,SAAO,MAAMnB,UAAU,OAhChB,SAACyB,GAClB,IAAMC,EAAMD,EAAKE,MAAM,KAEjBC,EAAOF,EAAK,GAKlB,MADgB,CAHFA,EAAK,GACPA,EAAK,GAAGC,MAAM,KAEE,GAAIC,GAAMC,KAAK,KA0BlCC,CAAWjB,EAAIY,WAKnB,2C,gBCLMM,EAjCD,WAAO,IAAD,EACmBxB,qBAAWJ,GAAzCG,EADW,EACXA,eAAgB0B,EADL,EACKA,WAEvB,OACE,yBAAKhC,UAAY,aACf,2BAAOiC,GAAG,QAAQjC,UAAU,SAC1B,+BACE,4BACGM,EAAe4B,SAASvB,KAAI,YAAqB,IAAlBD,EAAiB,EAAjBA,KAAMyB,EAAW,EAAXA,MACpC,OACE,wBACEnC,UAAU,MACViB,IAAKP,EACL0B,MAAO,CAACD,SACRE,QAAS,WACPL,EAAWtB,KAEVA,EACD,0BAAMV,UAAU,WACd,kBAAC,IAAD,aAOd,kBAAC,EAAD,S,gBCJOsC,EAvBA,WACb,IAAMC,EAAUhC,qBAAWJ,GAE3B,OACE,8BACE,yBAAKH,UAAU,cAEX,kCAAO,kBAAC,IAAD,MAAP,KAEF,2BACEwC,SAAUD,EAAQE,kBAClB/B,KAAK,SACLgC,KAAK,SACL1C,UAAU,eACV2C,YAAY,iBACZV,GAAG,c,MCREW,MARf,WACE,OACA,yBAAK5C,UAAW,QACd,kBAAC,EAAD,QCkGW6C,EAnGF,WAAO,IAAD,EAE2BC,mBAAS,CACnDC,MAAO,GACPtC,cAAe,GACfuC,MAAO,SACPd,SAAU,CACR,CAACxB,KAAM,QAASyB,MAAO,MAAOa,MAAO,UACrC,CAACtC,KAAM,OAAQyB,MAAO,MAAOa,MAAO,UACpC,CAACtC,KAAM,QAASyB,MAAO,MAAOa,MAAO,UACrC,CAACtC,KAAM,QAASyB,MAAO,MAAOa,MAAO,UACrC,CAACtC,KAAM,MAAOyB,MAAO,MAAOa,MAAO,aAXtB,mBAEV1C,EAFU,KAEM2C,EAFN,KAeVf,EAAkC5B,EAAlC4B,SAAUa,EAAwBzC,EAAxByC,MAAOtC,EAAiBH,EAAjBG,cAExByC,qBAAU,WACRC,IACGC,MAAK,SAAAC,GACJJ,EAAkB,eACb3C,EADY,CAEfyC,MAAOM,EAAIC,KAAKC,QAChB9C,cAAe4C,EAAIC,KAAKC,gBAG7B,IA4DH,OACE,kBAAC,EAAaC,SAAd,CACCC,MAAO,CAAEnD,iBAAgBmC,kBAbF,SAAAiB,GACxB,IAAMC,EAASD,EAAEE,OAAOH,MAClBI,EAAed,EAAMY,QAAO,SAAAG,GAEhC,IAA6C,KADhCA,EAAKpD,KAAKa,MAAMwC,cAAgB,IAAMD,EAAKpD,KAAKc,KAAKuC,eACxDC,QAAQL,EAAOI,eACvB,OAAOD,KAGXb,EAAkB,eAAI3C,EAAL,CAAqBG,cAAeoD,MAKR7B,WA5D5B,SAAAiC,GACjB,IAAIC,EAAehC,EAChByB,QAAO,SAAAQ,GAAE,OAAIA,EAAGzD,OAASuD,KACzBtD,KAAI,SAAAwD,GAAE,OAAIA,EAAGnB,SACboB,WAEHF,EAAiC,WAAjBA,EAA6B,UAAY,SAEzD,IAyBQG,EAAY5D,EAAc6D,MAzBlB,SAACC,EAAEC,GACjB,MAAqB,WAAjBN,OACgB1D,IAAf+D,EAAEN,GACI,EACEO,OAAchE,IAAZyD,IACH,EACa,SAAZA,EACFM,EAAEN,GAAS1C,MAAMkD,cAAcD,EAAEP,GAAS1C,OAE1CgD,EAAEN,GAASQ,cAAcD,EAAEP,SAGjBzD,IAAf+D,EAAEN,GACG,OACiBzD,IAAfgE,EAAEP,IACH,EAEW,SAAZA,EACAO,EAAEP,GAAS1C,MAAMkD,cAAcF,EAAEN,GAAS1C,OAEzCiD,EAAEP,GAASQ,cAAcF,EAAEN,OAMjCS,EAAiBxC,EAASvB,KAAI,SAAAwD,GAElC,OADAA,EAAGnB,MAAQmB,EAAGzD,OAASuD,EAAUC,EAAeC,EAAGnB,MAC5CmB,KAGTlB,EAAkB,eACb3C,EADY,CAEfG,cAAe4D,EACfJ,QAASS,QAoBT,kBAAC,EAAD,MACF,6BACGjE,EAAckE,OAAO,EAAI,kBAAC,EAAD,MAAW,iCChF9BC,MAbf,WACE,OACE,yBAAK5E,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,SCAY6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9391984d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Jumbo.css\";\n\nfunction Jumbo() {\n  return (\n    <div className=\"jumbotron\">\n      <h1> STAFF DIRECTORY </h1>\n      <p>Filter employees by name or search for a single employee</p>\n      <hr/>\n    </div>\n  )\n}\n\nexport default Jumbo;","import axios from \"axios\";\n\nexport default {\n  get: function() {\n    return axios.get(\"https://randomuser.me/api/?results=250&nat=us\");\n  }\n};","import React, {createContext} from \"react\";\n\n\nconst TableContext = createContext({\n  \n});\n\nexport default TableContext;","import React, {useContext} from \"react\";\nimport TableContext from  \"../../utils/TableContext\";\n\nconst TableBody = () => {\n  const {developerState} = useContext(TableContext);\n\n  const formatDate = (date) => {\n    const dArr= date.split(\"-\");\n\n    const year = dArr[0];\n    const month = dArr[1];\n    const day = dArr[2].split(\"T\");\n\n    const newDate = [month, day[0], year].join(\"-\");\n    return newDate;\n  }\n\n  return (\n    <tbody>\n      {developerState.filteredUsers[0] !== undefined && developerState.filteredUsers[0].name !== undefined \n      ? (developerState.filteredUsers.map(({name, email, dob, login, phone, picture}) => {\n        return (\n        <tr key={login.uuid}>\n          <td data-h=\"Image\" className=\"image\">\n            <img\n              src={picture.medium}\n              alt={`${name.first} ${name.last}`}\n            />\n          </td>\n          <td data-h=\"Name\" className=\"name\">\n            {`${name.first} ${name.last}`}\n          </td>\n          <td data-h=\"Phone\" className=\"phone\">\n            {phone}\n          </td>\n          <td data-h=\"Email\" className=\"email\">\n            {email}\n          </td>\n          <td data-h=\"DOB\" className=\"DOB\">\n            {formatDate(dob.date)}\n          </td>\n        </tr>\n        )\n      })) \n      : (<> </>)}\n    </tbody>\n  )\n}\n\nexport default TableBody;","import React, {useContext} from \"react\";\nimport TableBody from \"../TableBody/TableBody.js\";\nimport \"./Table.css\";\nimport TableContext from \"../../utils/TableContext\";\nimport {FaChevronCircleDown} from \"react-icons/fa\";\n\nconst Table = () => {\n  const {developerState, handleSort} = useContext(TableContext);\n  \n  return (\n    <div className = \"dataTable\">\n      <table id=\"table\" className=\"table\">\n        <thead>\n          <tr>\n            {developerState.headings.map(({ name, width}) => {\n              return (\n                <th\n                  className=\"col\"\n                  key={name}\n                  style={{width}}\n                  onClick={() => {\n                    handleSort(name);\n                  }} >\n                    {name}\n                    <span className=\"pointer\">\n                      <FaChevronCircleDown/>\n                      </span>\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n        <TableBody />\n\n      </table>\n    </div>\n  )\n}\n\nexport default Table;","import React, { useContext } from \"react\";\nimport \"./Search.css\";\nimport { BsSearch } from \"react-icons/bs\";\nimport TableContext from \"../../utils/TableContext\";\n\nconst Search = () => {\n  const context = useContext(TableContext);\n\n  return (\n    <form>\n      <div className=\"form-group\">\n       \n          <span> <BsSearch/> </span>\n        \n        <input\n          onChange={context.handleInputChange}\n          name=\"search\"\n          type=\"search\"\n          className=\"form-control\"\n          placeholder=\"Search by Name\"\n          id=\"search\"\n        />\n      </div>\n    </form>\n\n  )\n}\n\nexport default Search;","import React from \"react\";\nimport Search from \"../Search/Search.js\";\nimport \"./Nav.css\"\n\nfunction Nav() {\n  return (\n  <nav className =\" nav\">\n    <Search />\n  </nav>\n  )\n}\n\nexport default Nav;","import React, {useState, useEffect} from \"react\";\nimport API from \"../../utils/API\";\nimport TableContext from \"../../utils/TableContext\";\nimport Table from \"../Table/Table\";\nimport Nav from \"../Nav/Nav\"\n\nconst Main = () => {\n\n  const [developerState, setDeveloperState] = useState({\n    users: [],\n    filteredUsers: [],\n    order: \"ascend\",\n    headings: [\n      {name: \"Image\", width: \"10%\", order: \"ascend\"},\n      {name: \"name\", width: \"10%\", order: \"ascend\"},\n      {name: \"Phone\", width: \"20%\", order: \"ascend\"},\n      {name: \"Email\", width: \"20%\", order: \"ascend\"},\n      {name: \"DOB\", width: \"10%\", order: \"ascend\"}\n    ]\n  });\n\n  const {headings, users, filteredUsers} = developerState;\n\n  useEffect(() => {\n    API.get()\n      .then(res => {\n        setDeveloperState({\n          ...developerState,\n          users: res.data.results,\n          filteredUsers: res.data.results\n        })\n      })\n  }, []);\n\n  const handleSort = heading => {\n    let currentOrder = headings \n      .filter(el => el.name === heading)\n      .map(el => el.order)\n      .toString();\n\n    currentOrder = (currentOrder === \"ascend\") ? \"descend\" : \"ascend\";\n    \n    const compare = (a,b) => {\n      if (currentOrder === \"ascend\") {\n        if(a[heading] === undefined) {\n          return 1;\n        } else if (b[heading === undefined]) {\n          return -1\n        } else if (heading === \"name\") {\n          return a[heading].first.localeCompare(b[heading].first);\n        } else {\n          return a[heading].localeCompare(b[heading])\n        }\n      } else {\n        if (a[heading] === undefined) {\n          return 1;\n        } else if (b[heading] === undefined) {\n          return -1;\n        } \n        else if (heading === \"name\") {\n          return b[heading].first.localeCompare(a[heading].first);\n        } else {\n           return b[heading].localeCompare(a[heading]);\n        } \n      }\n    }\n\n      const sortUsers = filteredUsers.sort(compare);\n      const updateHeadings = headings.map(el => {\n        el.order = el.name === heading ? currentOrder : el.order;\n        return el;\n      });\n      \n      setDeveloperState({\n        ...developerState,\n        filteredUsers: sortUsers,\n        heading: updateHeadings\n      });\n    };\n  \n\n  const handleInputChange = e => {\n    const filter = e.target.value;\n    const filteredList = users.filter(item => {\n      let values = item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\n      if(values.indexOf(filter.toLowerCase()) !== -1) {\n        return item\n      };\n    });\n    setDeveloperState({...developerState, filteredUsers: filteredList});\n  }\n\n  return (\n    <TableContext.Provider\n     value={{ developerState, handleInputChange, handleSort}}\n    >\n        <Nav /> \n      <div>\n        {filteredUsers.length>0 ? <Table/> : <div></div>}\n      </div>\n      \n    </TableContext.Provider>\n  )\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Jumbo from \"./components/Jumbo/Jumbo\";\nimport Main from \"./components/Main/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Jumbo />\n      </header>\n      <div>\n        <Main />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}